/** Declaration file generated by dts-gen */

export = request;

declare function request(uri?: any, options?: any, callback?: any): any;

declare namespace request {
    // class Request {
    //     constructor(options: any);

    //     abort(): void;

    //     auth(user: any, pass: any, sendImmediately: any, bearer: any): any;

    //     aws(opts: any, now: any): any;

    //     debug(...args: any[]): void;

    //     destroy(): void;

    //     enableUnixSocket(): void;

    //     end(chunk: any): void;

    //     form(form: any): any;

    //     getHeader(name: any, headers: any): any;

    //     getNewAgent(): any;

    //     hawk(opts: any): void;

    //     httpSignature(opts: any): any;

    //     init(options: any, ...args: any[]): any;

    //     jar(jar: any): any;

    //     json(val: any): any;

    //     multipart(multipart: any): any;

    //     oauth(_oauth: any): any;

    //     onRequestError(error: any): void;

    //     onRequestResponse(response: any): any;

    //     pause(...args: any[]): void;

    //     pipe(dest: any, opts: any): any;

    //     pipeDest(dest: any): void;

    //     qs(q: any, clobber: any): any;

    //     readResponseBody(response: any): void;

    //     resume(...args: any[]): void;

    //     start(): void;

    //     toJSON(): any;

    //     write(...args: any[]): any;

    //     static debug: any;

    //     static defaultProxyHeaderExclusiveList: string[];

    //     static defaultProxyHeaderWhiteList: string[];

    // }

    const debug: any;

    const prototype: {
    };

    function cookie(str: any): any;

    function defaults(options: any, requester: any): any;

    function del(uri: any, options: any, callback: any): any;

    function forever(agentOptions: any, optionsArg: any): any;

    function get(uri: any, options: any, callback: any): any;

    function head(uri: any, options: any, callback: any): any;

    function initParams(uri: any, options: any, callback: any): any;

    function jar(store: any): any;

    function options(uri: any, options: any, callback: any): any;

    function patch(uri: any, options: any, callback: any): any;

    function post(uri: any, options: any, callback: any): any;

    function put(uri: any, options: any, callback: any): any;

    namespace Request {
        namespace prototype {
            function abort(): void;

            function addListener(type: any, listener: any): any;

            function auth(user: any, pass: any, sendImmediately: any, bearer: any): any;

            function aws(opts: any, now: any): any;

            function debug(...args: any[]): void;

            function destroy(): void;

            function emit(type: any, args: any): any;

            function enableUnixSocket(): void;

            function end(chunk: any): void;

            function eventNames(): any;

            function form(form: any): any;

            function getHeader(name: any, headers: any): any;

            function getMaxListeners(): any;

            function getNewAgent(): any;

            function hawk(opts: any): void;

            function httpSignature(opts: any): any;

            function init(options: any, ...args: any[]): any;

            function jar(jar: any): any;

            function json(val: any): any;

            function listenerCount(type: any): any;

            function listeners(type: any): any;

            function multipart(multipart: any): any;

            function oauth(_oauth: any): any;

            function off(type: any, listener: any): any;

            function on(type: any, listener: any): any;

            function onRequestError(error: any): void;

            function onRequestResponse(response: any): any;

            function once(type: any, listener: any): any;

            function pause(...args: any[]): void;

            function pipe(dest: any, opts: any): any;

            function pipeDest(dest: any): void;

            function prependListener(type: any, listener: any): any;

            function prependOnceListener(type: any, listener: any): any;

            function qs(q: any, clobber: any): any;

            function rawListeners(type: any): any;

            function readResponseBody(response: any): void;

            function removeAllListeners(type: any, ...args: any[]): any;

            function removeListener(type: any, listener: any): any;

            function resume(...args: any[]): void;

            function setMaxListeners(n: any): any;

            function start(): void;

            function toJSON(): any;

            function write(...args: any[]): any;

            namespace abort {
                const prototype: {
                };

            }

            namespace addListener {
                const prototype: {
                };

            }

            namespace auth {
                const prototype: {
                };

            }

            namespace aws {
                const prototype: {
                };

            }

            namespace debug {
                const prototype: {
                };

            }

            namespace destroy {
                const prototype: {
                };

            }

            namespace emit {
                const prototype: {
                };

            }

            namespace enableUnixSocket {
                const prototype: {
                };

            }

            namespace end {
                const prototype: {
                };

            }

            namespace eventNames {
                const prototype: {
                };

            }

            namespace form {
                const prototype: {
                };

            }

            namespace getHeader {
                const prototype: {
                };

            }

            namespace getMaxListeners {
                const prototype: {
                };

            }

            namespace getNewAgent {
                const prototype: {
                };

            }

            namespace hawk {
                const prototype: {
                };

            }

            namespace httpSignature {
                const prototype: {
                };

            }

            namespace init {
                const prototype: {
                };

            }

            namespace jar {
                const prototype: {
                };

            }

            namespace json {
                const prototype: {
                };

            }

            namespace listenerCount {
                const prototype: {
                };

            }

            namespace listeners {
                const prototype: {
                };

            }

            namespace multipart {
                const prototype: {
                };

            }

            namespace oauth {
                const prototype: {
                };

            }

            namespace off {
                const prototype: {
                };

            }

            namespace on {
                const prototype: {
                };

            }

            namespace onRequestError {
                const prototype: {
                };

            }

            namespace onRequestResponse {
                const prototype: {
                };

            }

            namespace once {
                const prototype: {
                };

            }

            namespace pause {
                const prototype: {
                };

            }

            namespace pipe {
                const prototype: {
                };

            }

            namespace pipeDest {
                const prototype: {
                };

            }

            namespace prependListener {
                const prototype: {
                };

            }

            namespace prependOnceListener {
                const prototype: {
                };

            }

            namespace qs {
                const prototype: {
                };

            }

            namespace rawListeners {
                const prototype: {
                };

            }

            namespace readResponseBody {
                const prototype: {
                };

            }

            namespace removeAllListeners {
                const prototype: {
                };

            }

            namespace removeListener {
                const prototype: {
                };

            }

            namespace resume {
                const prototype: {
                };

            }

            namespace setMaxListeners {
                const prototype: {
                };

            }

            namespace start {
                const prototype: {
                };

            }

            namespace toJSON {
                const prototype: {
                };

            }

            namespace write {
                const prototype: {
                };

            }

        }

    }

    namespace cookie {
        const prototype: {
        };

    }

    namespace defaults {
        const prototype: {
        };

    }

    namespace del {
        const prototype: {
        };

    }

    namespace forever {
        const prototype: {
        };

    }

    namespace get {
        const prototype: {
        };

    }

    namespace head {
        const prototype: {
        };

    }

    namespace initParams {
        const prototype: {
        };

    }

    namespace jar {
        const prototype: {
        };

    }

    namespace options {
        const prototype: {
        };

    }

    namespace patch {
        const prototype: {
        };

    }

    namespace post {
        const prototype: {
        };

    }

    namespace put {
        const prototype: {
        };

    }

}

